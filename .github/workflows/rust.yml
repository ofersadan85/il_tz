name: Rust

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    tags:
      - "v*.*.*"
    paths:
      # NOTE: Path filters are ignored for tag pushes
      - "src/**"
      - "Cargo.toml"
  pull_request:
    branches: ["main"]
    paths:
      - "src/**"
      - "Cargo.toml"

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cargo build --all-targets --features cli --verbose
      - name: Run tests
        run: cargo test --all-targets --features cli --verbose

  build-linux:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cargo build --release --features cli --verbose
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: iltz-linux-${{ github.ref_name }}
          path: target/release/iltz

  build-macos:
    runs-on: macos-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cargo build --release --features cli --verbose
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: iltz-macos-${{ github.ref_name }}
          path: target/release/iltz

  build-windows:
    runs-on: windows-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cargo build --release --features cli --verbose
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: iltz-windows-${{ github.ref_name }}.exe
          path: target/release/iltz.exe

  release:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    needs: [test, build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: target/release
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload release asset (linux)
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/iltz-linux-${{ github.ref_name }}
          asset_name: iltz-linux-${{ github.ref_name }}
          asset_content_type: application/octet-stream
      - name: Upload release asset (macos)
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/iltz-macos-${{ github.ref_name }}
          asset_name: iltz-macos-${{ github.ref_name }}
          asset_content_type: application/octet-stream
      - name: Upload release asset (windows)
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/iltz-windows-${{ github.ref_name }}.exe
          asset_name: iltz-windows-${{ github.ref_name }}.exe
          asset_content_type: application/octet-stream
